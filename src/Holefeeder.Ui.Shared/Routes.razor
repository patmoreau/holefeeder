@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<CustomErrorBoundary>
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(MainLayout).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <Authorizing>
                        <p>Determining session state, please wait...</p>
                    </Authorizing>
                    <NotAuthorized>
                        <p role="alert">You are not authorized to access this resource.</p>
                    </NotAuthorized>
                </AuthorizeRouteView>
                <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
</CustomErrorBoundary>

@code {
    public static Routes? Instance { get; private set; }

    protected override void OnInitialized()
    {
        Instance = this;

        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            // Navigate to the specific page
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            // Navigate to the login page
            Navigation.NavigateTo("/");
        }
    }

    public void NavigateToPurchase()
    {
        Navigation.NavigateTo("/purchase");
    }

}