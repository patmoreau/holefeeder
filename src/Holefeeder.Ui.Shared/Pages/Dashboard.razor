@page "/dashboard"
@inject IHolefeederApiService HolefeederApiService

<PageTitle>Dashboard</PageTitle>

<div class="d-flex flex-grow-1 gap-4 align-items-center">
    <MudText Typo="Typo.h3" Class="flex-none d-flex py-8" GutterBottom="true">Dashboard</MudText>
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ShoppingCart"
            Class="ml-auto d-flex py-8 mud-theme-primary" Href="/purchase"
            Style="Size.Large"/>
</div>

@if (_accounts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudGrid>
        @foreach (var account in _accounts.Items)
        {
            <MudItem xs="3">
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.h6">@account.Name</MudText>
                                <MudText Typo="Typo.body1">@account.Type</MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Justify="Justify.SpaceBetween">
                            <MudStack Row Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.body1">
                                    @account.OpenBalance.ToString("C", CultureInfo.CurrentUICulture)
                                </MudText>
                                <MudText Typo="Typo.body1">
                                    @account.Balance.ToString("C", CultureInfo.CurrentUICulture)
                                </MudText>
                            </MudStack>
                            <MudText Typo="Typo.body1">
                                @account.Updated.ToString("ddd, d MMM yyyy",
                                    CultureInfo.CurrentUICulture)
                            </MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
<MudText Class="mb-8">@_cashflows?.Count cashflows</MudText>
@if (_cashflows == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_cashflows" Hover="true" SortLabel="Sort By" Elevation="0">
        <ColGroup>
            <col/>
            <col style="width: 100%;"/>
        </ColGroup>
        <RowTemplate>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.AddShoppingCart" Color="Color.Primary"/>
            </MudTd>
            <MudTd>
                <TransactionList Description="@context.Description" Amount="@context.Amount" Date="@context.Date"
                                 Tags="@context.Tags"/>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {10, 50, 100}"/>
        </PagerContent>
    </MudTable>
}

@code {
    private PagingInfo<Account>? _accounts;
    private IReadOnlyList<Upcoming>? _cashflows;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
        await LoadCashflows();
    }

    private async Task LoadAccounts()
    {
        var result = await HolefeederApiService.GetAccounts(["-favorite", "name"], ["inactive:eq:false"]);
        if (result is {IsSuccessStatusCode: true, Content: not null})
        {
            result.ContentHeaders.TryGetValues("X-Total-Count", out var totalCount);
            var accounts = result.Content?.ToList() ?? [];
            _accounts = new PagingInfo<Account>
            {
                Items = accounts,
                TotalCount = int.Parse(totalCount?.FirstOrDefault() ?? accounts.Count.ToString())
            };
        }
    }

    private async Task LoadCashflows()
    {
        var result = await HolefeederApiService.GetUpcomingCashflows(DateOnly.FromDateTime(DateTime.Now),
            DateOnly.FromDateTime(DateTime.Now.AddMonths(1)));
        if (result is {IsSuccessStatusCode: true, Content: not null})
        {
            _cashflows = result.Content;
        }
    }
}
