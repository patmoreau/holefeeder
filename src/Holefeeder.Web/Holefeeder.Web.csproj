<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <Configurations>Debug;Release;Staging</Configurations>
        <Platforms>AnyCPU</Platforms>
    </PropertyGroup>

    <PropertyGroup>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <SpaProxyServerUrl>https://localhost:44418</SpaProxyServerUrl>
        <SpaProxyLaunchCommand>pnpm start</SpaProxyLaunchCommand>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <UserSecretsId>98f4b97b-0a4e-434b-a0de-5f03d05693d0</UserSecretsId>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Staging' ">
        <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">true</DebugSymbols>
        <Optimize Condition=" '$(Optimize)' == '' ">false</Optimize>
    </PropertyGroup>

    <ItemGroup>
        <FrameworkReference Remove="Microsoft.AspNetCore.App" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
        <None Remove="ClientApp\.angular\**" />
        <Content Remove="ClientApp\.angular\**" />
        <None Remove="ClientApp\dist\**" />
        <Content Remove="ClientApp\dist\**" />
        <Content Update="appsettings.Development.json">
            <DependentUpon>appsettings.json</DependentUpon>
        </Content>
        <Content Update="appsettings.Staging.json">
            <DependentUpon>appsettings.json</DependentUpon>
        </Content>
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="AspNetCore.HealthChecks.UI" />
        <PackageReference Include="AspNetCore.HealthChecks.UI.Client" />
        <PackageReference Include="AspNetCore.HealthChecks.UI.InMemory.Storage" />
        <PackageReference Include="Carter" />
        <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
        <PackageReference Include="Microsoft.AspNetCore.SpaProxy" />
        <PackageReference Include="Microsoft.Identity.Web" />
        <PackageReference Include="Serilog.AspNetCore" />
        <PackageReference Include="Serilog.Enrichers.Environment" />
        <PackageReference Include="Serilog.Sinks.Seq" />
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**" />
        <None Remove="$(SpaRoot)**" />
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
        <None Remove="ClientApp\.angular\**" />
        <Content Remove="ClientApp\.angular\**" />
        <None Remove="ClientApp\dist\**" />
        <Content Remove="ClientApp\dist\**" />
    </ItemGroup>

    <ItemGroup>
        <Compile Remove="ClientApp\.angular\**" />
        <Compile Remove="ClientApp\dist\**" />
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Remove="ClientApp\.angular\**" />
        <EmbeddedResource Remove="ClientApp\dist\**" />
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
        <Message Importance="high" Text="Restoring dependencies using 'pnpm'. This may take several minutes..." />
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
        <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm run build --configuration production" />

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)dist\browser\**; $(SpaRoot)dist-server\**" />
            <ResolvedFileToPublish Include="@(DistFiles-&gt;'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
                <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>
