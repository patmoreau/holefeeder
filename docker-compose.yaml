services:
  reverse-proxy:
    image: traefik:v3.3.6
    container_name: reverse-proxy
    restart: unless-stopped
    command:
      - '--configFile=/etc/traefik/traefik.yml'
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Map the static configuration into the container
      - .docker/traefik/traefik.${ENV}.yml:/etc/traefik/traefik.yml:ro
      # Map the dynamic configuration into the container
      - .docker/traefik/dynamic.${ENV}.yml:/etc/traefik/dynamic.yml:ro
      - traefik_certs:/letsencrypt

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    expose:
      - 9000
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.portainer-router.entrypoints=websecure'
      - 'traefik.http.routers.portainer-router.rule=Host(`portainer.${DOMAIN}`)'
      - 'traefik.http.routers.portainer-router.tls=true'
      - 'traefik.http.routers.portainer-router.tls.certresolver=acme_certresolver'
      - 'traefik.http.services.portainer-service.loadbalancer.server.port=9000'

  whoami:
    image: traefik/whoami:v1.11
    container_name: whoami
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.whoami-router.entrypoints=websecure'
      - 'traefik.http.routers.whoami-router.rule=Host(`whoami.${DOMAIN}`)'
      - 'traefik.http.routers.whoami-router.tls=true'
      - 'traefik.http.routers.whoami-router.tls.certresolver=acme_certresolver'

  seq:
    image: datalust/seq:2024.3
    container_name: seq
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - ACCEPT_EULA=Y
      - SEQ_API_KEY=${SEQ_API_KEY}
      - SEQ_BASE_URI=http://seq:5341
    expose:
      - 80
      - 5341
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.seq-router.entrypoints=websecure'
      - 'traefik.http.routers.seq-router.rule=Host(`seq.${DOMAIN}`)'
      - 'traefik.http.routers.seq-router.tls=true'
      - 'traefik.http.routers.seq-router.tls.certresolver=acme_certresolver'
    volumes:
      - seq-data:/data

  postgres:
    image: postgres:17.4
    container_name: postgres
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_APP_USER=${POSTGRES_APP_USER}
      - POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD}
      - POSTGRES_APP_DB=${POSTGRES_APP_DB}
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - .docker/scripts/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    labels:
      - 'traefik.enable=false'

  adminer:
    image: adminer:4.17.1
    container_name: adminer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
    expose:
      - 8080
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.adminer-router.entrypoints=websecure'
      - 'traefik.http.routers.adminer-router.rule=Host(`adminer.${DOMAIN}`)'
      - 'traefik.http.routers.adminer-router.tls=true'
      - 'traefik.http.routers.adminer-router.tls.certresolver=acme_certresolver'

  api:
    container_name: api
    restart: unless-stopped
    depends_on:
      - postgres
    expose:
      - 80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENV}
      - ASPNETCORE_URLS=http://+
      - ConnectionStrings__BudgetingConnectionString=Host=postgres;Port=5432;Username=${POSTGRES_APP_USER};Password=${POSTGRES_APP_PASSWORD};Database=${POSTGRES_APP_DB};
      - Serilog__WriteTo__1__Args__apiKey=${SEQ_API_KEY}
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.api-router.entrypoints=websecure'
      - 'traefik.http.routers.api-router.rule=(Host(`holefeeder.${DOMAIN}`) || Host(`holefeeder-admin.${DOMAIN}`)) && PathPrefix(`/gateway`)'
      - 'traefik.http.routers.api-router.tls=true'
      - 'traefik.http.routers.api-router.tls.certresolver=acme_certresolver'
      - 'traefik.http.routers.api-router.middlewares=gateway-remover'
      - 'traefik.http.middlewares.gateway-remover.stripprefix.prefixes=/gateway'

  web:
    container_name: web
    restart: unless-stopped
    depends_on:
      - api
    expose:
      - 80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENV}
      - ASPNETCORE_HOSTINGSTARTUPASSEMBLIES=Microsoft.AspNetCore.SpaProxy
      - ASPNETCORE_URLS=http://+
      - AngularSettings__RedirectUrl=https://holefeeder.${DOMAIN}
      - Serilog__WriteTo__1__Args__apiKey=${SEQ_API_KEY}
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=proxy'
      - 'traefik.http.routers.web-router.entrypoints=websecure'
      - 'traefik.http.routers.web-router.rule=(Host(`holefeeder.${DOMAIN}`) && !PathPrefix(`/gateway`)) || (Host(`holefeeder-admin.${DOMAIN}`) && PathPrefix(`/hc-ui`))'
      - 'traefik.http.routers.web-router.tls=true'
      - 'traefik.http.routers.web-router.tls.certresolver=acme_certresolver'

networks:
  default:
    name: proxy

volumes:
  postgres-data:
  seq-data:
  traefik_certs:
  portainer_data:
